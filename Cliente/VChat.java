package Cliente;

import Base.FachadaBase;
import Servidor.ServidorP2PInterfaz;
import java.rmi.RemoteException;
import Usuario.Usuario;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;

/**
 * Interfaz para enviar mensajes con diferentes usuarios manteniendo un 
 * registro de mensajes parcial (solo en cada inicio de sesion)
 * @author Marcos Garcia y Daniel Fuentes
 */
public class VChat extends javax.swing.JFrame {
      
    private final DefaultListModel modeloLista;  
    private String nombre;
    private FachadaBase FachadaBase;
    private ServidorP2PInterfaz servidor;
    private HashMap<String, String> conversaciones;
    private String uactual;
    
    public VChat(FachadaBase FachadaBase, ServidorP2PInterfaz servidor) throws RemoteException {
        this.modeloLista = new DefaultListModel();
        this.FachadaBase = FachadaBase;
        this.servidor = servidor;
        initComponents();
        conversaciones = new HashMap<>();
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jMenu1 = new javax.swing.JMenu();
        OK = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Amigos = new javax.swing.JList<>();
        Entrada = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        Mensajes = new javax.swing.JTextArea();
        Peticiones = new javax.swing.JButton();
        Añadir = new javax.swing.JButton();
        User = new javax.swing.JLabel();
        Salir = new javax.swing.JButton();
        verChat = new javax.swing.JButton();

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        OK.setText("OK");
        OK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OKActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(Amigos);

        Mensajes.setColumns(20);
        Mensajes.setRows(5);
        jScrollPane1.setViewportView(Mensajes);

        Peticiones.setText("Ver Peticiones");
        Peticiones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PeticionesActionPerformed(evt);
            }
        });

        Añadir.setText("Pedir Amistad");
        Añadir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AñadirActionPerformed(evt);
            }
        });

        User.setFont(new java.awt.Font("AnjaliOldLipi", 1, 36)); // NOI18N

        Salir.setText("Salir");
        Salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirActionPerformed(evt);
            }
        });

        verChat.setText("Ver Chat");
        verChat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verChatActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(User)
                        .addGap(228, 228, 228))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(Añadir, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Salir)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Peticiones, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
                            .addComponent(verChat, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(Entrada, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(OK, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(User, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(verChat))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Entrada, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(OK, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(Peticiones)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Salir)
                    .addComponent(Añadir))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OKActionPerformed
        // TODO add your handling code here:
        String entrada = Entrada.getText();
        String mensajes = Mensajes.getText();
        entrada = "["+nombre+"]: "+entrada+"\n";
        int index = Amigos.getSelectedIndex();
        Usuario amigo = (Usuario) modeloLista.getElementAt(index);
        if(entrada!=null && amigo!=null && amigo.getNombre().trim().equals(uactual.trim())){
            ClienteP2PInterfaz amigoP2P = amigo.getUsuario();
            try {
                amigoP2P.enviarMensajes(entrada,nombre);
                Mensajes.setText(mensajes+entrada);
            } catch (RemoteException ex) {
                Logger.getLogger(VChat.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_OKActionPerformed
    private void AñadirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AñadirActionPerformed
        // TODO add your handling code here:
        VAñadir van = new VAñadir(nombre,FachadaBase);
        van.setVisible(true);
    }//GEN-LAST:event_AñadirActionPerformed

    private void PeticionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PeticionesActionPerformed
        VPeticiones vp = new VPeticiones(this.nombre, FachadaBase,this,servidor);
        vp.setVisible(true);
    }//GEN-LAST:event_PeticionesActionPerformed

    private void SalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirActionPerformed
        try {
            // TODO add your handling code here:
            servidor.salirCallback(nombre);
            System.exit(0);
        } catch (RemoteException ex) {
            Logger.getLogger(VChat.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SalirActionPerformed

    private void verChatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verChatActionPerformed
        
        String mensajes = Mensajes.getText();
        
        int index = Amigos.getSelectedIndex();
        Usuario amigo = (Usuario) modeloLista.getElementAt(index);
        
        if(conversaciones.containsKey(uactual)){
            conversaciones.replace(uactual, mensajes);
        }
        else{
           conversaciones.put(uactual, "");
        }
         
        uactual = amigo.getNombre();
        
        if(conversaciones.containsKey(uactual)){
            Mensajes.setText(conversaciones.get(uactual));
        }
        else{
            Mensajes.setText("");
        }
    }//GEN-LAST:event_verChatActionPerformed

    public void escribirMensaje(String mensaje, String nombre){
        if(uactual!=null){
            if(conversaciones.containsKey(nombre) && uactual.equals(nombre)){
                String mensajes = Mensajes.getText();
                conversaciones.replace(nombre, mensajes+mensaje);
                Mensajes.setText(conversaciones.get(uactual));
            }

            else if(!conversaciones.containsKey(nombre) && uactual.equals(nombre)){
                String mensajes = Mensajes.getText();
                conversaciones.put(nombre, mensajes+mensaje);
                Mensajes.setText(conversaciones.get(uactual));
            }
            else if(conversaciones.containsKey(nombre)){
                String mensajes = conversaciones.get(nombre);
                conversaciones.replace(nombre, mensajes+mensaje);
            }
            else{
               conversaciones.put(nombre, mensaje);
            }
        }else{
            if(conversaciones.containsKey(nombre)){
                String mensajes = conversaciones.get(nombre);
                conversaciones.replace(nombre, mensajes+mensaje);
            }
            else{
               conversaciones.put(nombre, mensaje);
            }
        }
    }
    public void setListaUsuarios(ArrayList<Usuario> usuarios){
        modeloLista.clear();
        try{
           for(int i = 0; i < usuarios.size(); i++){
               if(!usuarios.get(i).getNombre().trim().equals(nombre.trim())){
                    modeloLista.addElement(usuarios.get(i));
               }
           } 
           Amigos.setModel(modeloLista);
        }
        catch(Exception e){
            System.out.println("Error en el combobox: " + e);
        }    
    }
    
    public void setNombre(String nombre){
        this.nombre = nombre;
        User.setText("Chat de " + nombre);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> Amigos;
    private javax.swing.JButton Añadir;
    private javax.swing.JTextField Entrada;
    private javax.swing.JTextArea Mensajes;
    private javax.swing.JToggleButton OK;
    private javax.swing.JButton Peticiones;
    private javax.swing.JButton Salir;
    private javax.swing.JLabel User;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton verChat;
    // End of variables declaration//GEN-END:variables
}
